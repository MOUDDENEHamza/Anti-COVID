{"version":3,"sources":["./src/app/contact/contact.module.ts","./src/app/contact/contact.service.ts","./src/app/contact/contact-routing.module.ts","./src/app/contact/contact.component.ts","./src/app/contact/contact.component.html","./src/app/contact/failed-sending-email/failed-sending-email.component.ts","./src/app/contact/failed-sending-email/failed-sending-email.component.html","./src/app/contact/success-sending-email/success-sending-email.component.ts","./src/app/contact/success-sending-email/success-sending-email.component.html"],"names":[],"mappings":"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","file":"contact-contact-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ContactRoutingModule } from './contact-routing.module';\nimport { ContactComponent } from './contact.component';\nimport { SuccessSendingEmailComponent } from './success-sending-email/success-sending-email.component';\nimport { FailedSendingEmailComponent } from './failed-sending-email/failed-sending-email.component';\n\n\n@NgModule({\n  declarations: [ContactComponent, SuccessSendingEmailComponent, FailedSendingEmailComponent],\n  imports: [\n    CommonModule,\n    ContactRoutingModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule\n  ]\n})\nexport class ContactModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators'; \n\nexport class contact {\n  \n  firstName: string;\n  lastName: string;\n  email: string;\n  subject: string;\n  content: string;\n\n  constructor(firstName: string, lastName: string, email: string, subject: string, content: string) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.email = email;\n    this.subject = subject;\n    this.content = content;\n  }\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  /** Attribute of service. */\n  private baseURL = 'http://localhost:8080/AntiCOVID/rest/';\n\n  /**\n   * Constructor of service.\n   * @param http to communicate with the backend.\n   */\n  constructor(private http: HttpClient) {\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status >= 400) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(\n          `Backend returned code ${error.status}, ` +\n          `body was: ${error.error}`);\n      }\n      // Return an observable with a user-facing error message.\n      return throwError('Something bad happened; please try again later.');\n    } if (error.status === 0) {\n      return throwError('Error while connect to server');\n    } else {\n      return 'o';\n    }\n  }\n  \n  /**\n   * Send the form contact to administrator.\n   */\n  public sendEmail(firstName: string, lastName: string, email: string, subject: string, content: string) {\n    const headers = {'content-type': 'application/json'}  \n    const body = JSON.stringify(new contact(firstName, lastName, email, subject, content));\n    return this.http.post(this.baseURL + 'contact', body ,{'headers': headers}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ContactComponent } from './contact.component';\n\nconst routes: Routes = [{ path: '', component: ContactComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ContactRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ContactService } from './contact.service';\nimport { FailedSendingEmailComponent } from './failed-sending-email/failed-sending-email.component';\nimport { SuccessSendingEmailComponent } from './success-sending-email/success-sending-email.component';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent implements OnInit {\n\n  /** Attributes of component. */\n  title = 'Contact';\n  contactForm: FormGroup;\n  ContactService: any;\n\n  /**\n   * Constructor of component.\n   */\n  constructor(private contactService: ContactService,\n              public dialog: MatDialog) { }\n\n  /**\n   * A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive to\n   * initialize the form using in the component.\n   */\n  ngOnInit(): void {\n    this.contactForm = new FormGroup({\n      firstName: new FormControl('', [Validators.required]),\n      lastName: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      subject: new FormControl('', [Validators.required]),\n      content: new FormControl('', [Validators.required])\n    });\n  }\n\n  /**\n   * Get error message if an input is invalid\n   */\n   getErrorMessage(item : string) : string {\n    if (this.contactForm.get(item).hasError('required')) {\n      return 'You should fill this field.';\n    } else { \n      if (this.contactForm.get(item).hasError('email')) {\n        return 'Not a valid email';\n      }\n    }\n  }\n\n  /**\n   * Enable send button when the form is valid\n   */\n   enable(): boolean {\n    return this.contactForm.invalid;\n  }\n\n  /**\n   * Send the form to administrator.\n   */\n  onSubmit() {    \n    this.contactService.sendEmail(this.contactForm.get('firstName').value,\n    this.contactForm.get('lastName').value, this.contactForm.get('email').value,\n    this.contactForm.get('subject').value, this.contactForm.get('content').value).subscribe(\n      data => {\n        console.log(data);\n        this.dialog.open(SuccessSendingEmailComponent);\n      },\n      error => {\n        this.dialog.open(FailedSendingEmailComponent);\n      }\n    );\n    this.ngOnInit();\n  }\n\n}","<div class=\"wrapper\">\n  <mat-card class=\"container\">\n    <h1>{{ this.title }}</h1>\n    <form [formGroup]=\"this.contactForm\">\n\n      <mat-form-field appearance=\"fill\" class=\"meduimField\">\n        <mat-label>First name</mat-label>\n        <label>\n          <input matInput placeholder=\"Marine\" formControlName=\"firstName\" required>\n        </label>\n        <mat-error *ngIf=\"this.contactForm.get('firstName').invalid\">{{ getErrorMessage('firstName') }}</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" class=\"meduimField\">\n        <mat-label>Last name</mat-label>\n        <label>\n          <input matInput placeholder=\"Dupont\" formControlName=\"lastName\" required>\n        </label>\n        <mat-error *ngIf=\"this.contactForm.get('lastName').invalid\">{{ getErrorMessage('lastName') }}</mat-error>\n      </mat-form-field>\n\n      <br>\n\n      <mat-form-field appearance=\"fill\" class=\"largeField\">\n        <mat-label>Email</mat-label>\n        <label>\n          <input matInput placeholder=\"xyz@gmail.com\" formControlName=\"email\" required>\n        </label>\n        <mat-error *ngIf=\"this.contactForm.get('email').invalid\">{{ getErrorMessage('email') }}</mat-error>\n      </mat-form-field>\n\n      <br>\n\n      <mat-form-field appearance=\"fill\" class=\"largeField\">\n        <mat-label>Subject</mat-label>\n        <label>\n          <input matInput placeholder=\"Informations\" formControlName=\"subject\" required>\n        </label>\n        <mat-error *ngIf=\"this.contactForm.get('subject').invalid\">{{ getErrorMessage('subject') }}</mat-error>\n      </mat-form-field>\n\n      <br>\n\n      <mat-form-field appearance=\"fill\" class=\"largeField\">\n        <mat-label>Content</mat-label>\n        <label>\n          <textarea matInput placeholder=\"Write your message here...\" formControlName=\"content\" required></textarea>\n        </label>\n        <mat-error *ngIf=\"this.contactForm.get('content').invalid\">{{ getErrorMessage('content') }}</mat-error>\n      </mat-form-field>\n\n    </form>\n\n    <button mat-raised-button color=\"primary\" [disabled]=\"enable()\" (click)=\"onSubmit()\">\n      <mat-icon aria-hidden=\"false\" aria-label=\"Example email icon\">email</mat-icon>\n      Send\n    </button>\n\n  </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-failed-sending-email',\n  templateUrl: './failed-sending-email.component.html',\n  styleUrls: ['./failed-sending-email.component.css']\n})\nexport class FailedSendingEmailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2 mat-dialog-title>\n    <img src=\"../../../assets/failed.png\" alt=\"Success\" width=\"25px\" height=\"25px\">\n    Failed\n</h2>\n\n<mat-dialog-content class=\"mat-typography\">\n    <h3>Something bad happened, please try again later.</h3>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button mat-button mat-dialog-close>Close</button>\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-success-sending-email',\n  templateUrl: './success-sending-email.component.html',\n  styleUrls: ['./success-sending-email.component.css']\n})\nexport class SuccessSendingEmailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2 mat-dialog-title>\n    <img src=\"../../../assets/success.png\" alt=\"Success\" width=\"25px\" height=\"25px\">\n    Success\n</h2>\n\n<mat-dialog-content class=\"mat-typography\">\n    <h3>Your email has been sent with success</h3>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button mat-button mat-dialog-close>Close</button>\n</mat-dialog-actions>"],"sourceRoot":"webpack:///"}